import "server-only";import { redirect } from "next/navigation";import { cookies } from "next/headers";import { cache } from "react";import { appConfig } from "@/app-config";export const SESSION_COOKIE_NAME = appConfig.auth.sessionCookieName;const REDIRECT_KEY = appConfig.auth.redirectQsKey;export type SessionClaims = {  token: string;  userId?: string;  email?: string;  roles: string[];  expiresAt?: number;};const decodeSegment = (segment: string) => {  try {    const normalized = segment.replace(/-/g, "+").replace(/_/g, "/");    const padded = normalized.padEnd(Math.ceil(normalized.length / 4) * 4, "=");    const payload = Buffer.from(padded, "base64").toString("utf8");    return JSON.parse(payload) as Record<string, unknown>;  } catch {    return null;  }};const parseToken = (token: string): SessionClaims => {  const [, payload = ""] = token.split(".");  const decoded = decodeSegment(payload);  if (!decoded || typeof decoded !== "object") {    return { token, roles: [] };  }  return {    token,    userId: typeof decoded.sub === "string" ? decoded.sub : undefined,    email: typeof decoded.email === "string" ? decoded.email : undefined,    roles: Array.isArray(decoded.roles)      ? decoded.roles.filter((role): role is string => typeof role === "string")      : [],    expiresAt:      typeof decoded.exp === "number"        ? decoded.exp * 1000        : undefined,  };};export const readSessionToken = cache(async () => {  const cookieStore = await cookies();  const cookie = cookieStore.get(SESSION_COOKIE_NAME);  return cookie?.value ?? null;});export const getSession = cache(async (): Promise<SessionClaims | null> => {  const token = await readSessionToken();  if (!token) return null;  return parseToken(token);});export async function requireSession(options: { redirectTo?: string } = {}) {  const session = await getSession();  if (!session) {    const target = options.redirectTo ?? appConfig.urls.marketing;    const url = new URL(target, appConfig.urls.base);    url.searchParams.set(      REDIRECT_KEY,      options.redirectTo ?? appConfig.urls.dashboard    );    redirect(url.toString());  }  return session;}export function readSessionFromRequest(  request: Pick<Request, "headers">): SessionClaims | null {  const cookieHeader = request.headers.get("cookie");  if (!cookieHeader) return null;  const cookies = Object.fromEntries(    cookieHeader.split(";").map((cookie) => {      const [name, ...rest] = cookie.trim().split("=");      return [name, rest.join("=")];    })  );  const token = cookies[SESSION_COOKIE_NAME];  if (!token) return null;  return parseToken(token);}